import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { config } from "@/config";
import { Atom } from "lucide-react";
import { FC, useState } from "react";

const httpMethods = ["GET", "POST"] as const;
type HttpMethod = (typeof httpMethods)[number];

interface OnWebhookProps {
  webhookId: string;
  initialValues?: {
    urls?: string;
    httpMethod?: HttpMethod;
    path?: string;
    auth?: string;
  };
  onChange?: (values: {
    httpMethod: HttpMethod;
    path?: string;
    auth?: string;
  }) => void;
}

const OnWebhook: FC<OnWebhookProps> = ({
  webhookId,
  initialValues,
  onChange,
}) => {
  const [formValues, setFormValues] = useState({
    urls: initialValues?.urls || "",
    httpMethod: initialValues?.httpMethod || "GET",
    path: webhookId || "",
    auth: initialValues?.auth || "none",
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    const updated = { ...formValues, [id]: value };
    setFormValues(updated);
    onChange?.(updated);
  };

  const handleSelectChange = (key: keyof typeof formValues, value: string) => {
    const updated = { ...formValues, [key]: value };
    setFormValues(updated);
    onChange?.(updated);
  };

  return (
    <div className="w-full flex items-center h-full gap-4">
      <div className="max-w-sm w-full flex items-center justify-center">
        <Button
          variant="default"
          className=""
          onClick={() => console.log("Listening for test event (left)")}
        >
          Listen for Test Event
        </Button>
      </div>

      <div className="max-w-lg shadow border rounded-sm h-full p-2 w-full">
        <div className="flex items-center justify-between border-b p-2 mb-5">
          <div className="flex items-center gap-1">
            <Atom />
            <h2 className="font-bold text-xl">Webhook</h2>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={() => console.log("Listening for test event (center)")}
          >
            Listen for Test Event
          </Button>
        </div>

        <form className="space-y-4">
          {/* Webhook URL (readonly, generated by system) */}
          <div className="space-y-2">
            <label className="block font-semibold text-sm" htmlFor="urls">
              Webhook URL [TEST]
            </label>
            <Input
              type="text"
              id="urls"
              value={`${config.server_url}/webook-test/${webhookId}`}
              readOnly
              className="font-medium text-gray-700"
              placeholder="Generated webhook URL"
            />
          </div>

          {/* HTTP Method */}
          <div className="space-y-2">
            <label className="block text-xs font-semibold">HTTP Method</label>
            <Select
              value={formValues.httpMethod}
              onValueChange={(val) => handleSelectChange("httpMethod", val)}
            >
              <SelectTrigger className="w-full text-gray-600 cursor-pointer font-medium">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {httpMethods.map((method) => (
                  <SelectItem key={method} value={method}>
                    {method}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Path */}
          <div className="space-y-2">
            <label className="block font-semibold text-sm" htmlFor="path">
              Path
            </label>
            <Input
              id="path"
              type="text"
              value={formValues.path}
              onChange={handleInputChange}
              placeholder="e.g. my-webhook/:userId"
            />
          </div>

          {/* Auth */}
          <div className="space-y-2">
            <label className="block text-xs font-semibold">Auth</label>
            <Select
              value={formValues.auth}
              onValueChange={(val) => handleSelectChange("auth", val)}
            >
              <SelectTrigger className="w-full text-gray-600 cursor-pointer font-medium">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">None</SelectItem>
                <SelectItem value="basic">Basic Auth</SelectItem>
                <SelectItem value="header">Header Auth</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </form>
      </div>
      <div className="flex-1 border p-2 rounded bg-gray-50">
        <pre className="text-sm text-gray-700">{/* output */}</pre>
      </div>
    </div>
  );
};

export default OnWebhook;
